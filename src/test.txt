Hello world - print('Hello World!');

cat - let res = scan();
    while(res != EOF){
        print(res);
        res = scan();
    }

prob5 - let n = 20;
        let i = 19;
        while (i > 0){
        if(n%i == 0){
            i = i-1;
        }else{
            n = n + 20;
            i = 19;
        }
        if(i == 1){
            print(n)
        }
        }

Критические ошибки в протоколах OPC

Описание:
OPC(Open Platform Communications) – это набор программных технологий, которые предоставляют единый интерфейс для управления различными устройствами и обмена данными.
Claroty отметила производителя програмных компонентов Kepware PTC который внесли исправления уязвимостей. Kepware является компанией-разработчиком коммуникационного
программного обеспечения для предприятий промышленного производства, нефтегазовой отрасли, электроэнергетики, а также для систем автоматизации зданий.
Решения Kepware используются в SCADA-системах для соединения с промышленными устройствами Allen Bradley, AutomationDirect, BACnet, DNP 3.0, GE, Honeywell, Mitsubishi,
Modicon, Omron, Siemens, Texas Instruments, Yokogawa и др. Уязвимыми являются версии: KEPServerEX v6.0 — v6.9, ThingWorx Kepware Server v6.8 — v6.9,  ThingWorx Industrial Connectivity — все версии,
ThingWorx OPC-Aggregator — все версии.В ThingWorx Edge Server обнаружена уязвимость переполнения стека, которая не требует аутентификации и может эксплуатироваться удаленно.
Ошибка в логике декодирования строк OPC позволяет записывать строки длиннее 1024 байт без выделения дополнительной памяти.
Эксплуатируя уязвимость, злоумышленник может перезаписать данные в стеке после первых 1024 байт и вызвать сбой в работе сервера и,
возможно, осуществить выполнение вредоносного кода. Еще одна уязвимость потока декодирования строк OPC может привести к утечке данных и отказу сервера из-за чтения вне границ
выделенной динамической памяти. Она присутствует как в Windows-, так и Linux-версиях ThingWorx Edge Server. В Kepware KEPServerEX Edge Server имеется возможность использования
данных после освобождения памяти. Эксплуатация уязвимости не требует аутентификации и вызывает «гонку потоков», что приводит к попытке использования освобожденного объекта
после закрытия соединения с ним и последующему сбою сервера. Можно сделать следующие выводы:
1) Данные уязвимости являются архитектурной ошибкой программистов и
неправильным построением декодирования строк.
2)Использовать все возможные инструменты для поддержки безопасности и поиска уязвимостей безопасности.
3) Для защиты стэка от переполнения стоит использовать стековые конорейки

Что такое Open Platform Communications и какие виды OPC вы знаете?
